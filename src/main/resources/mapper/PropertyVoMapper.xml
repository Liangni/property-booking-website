<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.penny.dao.PropertyVoMapper">
    <resultMap id="BaseResultMap" type="com.penny.vo.PropertyVo">
        <id column="property_id" jdbcType="BIGINT" property="propertyId"/>
        <result column="property_title" jdbcType="VARCHAR" property="propertyTitle"/>
        <result column="property_description" jdbcType="VARCHAR" property="propertyDescription"/>
        <result column="max_num_of_guests" jdbcType="INTEGER" property="maxNumOfGuests"/>
        <result column="num_of_bedrooms" jdbcType="INTEGER" property="numOfBedrooms"/>
        <result column="num_of_beds" jdbcType="INTEGER" property="numOfBeds"/>
        <result column="num_of_bathrooms" jdbcType="INTEGER" property="numOfBathrooms"/>
        <result column="price_on_weekdays" jdbcType="BIGINT" property="priceOnWeekdays"/>
        <result column="price_on_weekends" jdbcType="BIGINT" property="priceOnWeekends"/>
        <result column="is_published" jdbcType="BIT" property="isPublished"/>
        <result column="average_rating" jdbcType="DOUBLE" property="averageRating"/>
        <result column="property_group_type_id" jdbcType="BIGINT" property="propertyGroupTypeId"/>
        <result column="property_share_type_id" jdbcType="BIGINT" property="propertyShareTypeId"/>
        <result column="address_id" jdbcType="BIGINT" property="addressId"/>
        <result column="host_id" jdbcType="BIGINT" property="hostId"/>
        <result column="street" jdbcType="VARCHAR" property="street"/>
        <result column="apartment_floor" jdbcType="VARCHAR" property="apartmentFloor"/>
        <result column="admin_area_level_1_district_id" jdbcType="BIGINT" property="adminAreaLevel1DistrictId"/>
        <result column="admin_area_level_2_district_id" jdbcType="BIGINT" property="adminAreaLevel2DistrictId"/>
        <result column="admin_area_level_3_district_id" jdbcType="BIGINT" property="adminAreaLevel3DistrictId"/>
        <result column="admin_area_level_1_district_name" jdbcType="BIGINT" property="adminAreaLevel1DistrictName"/>
        <result column="admin_area_level_2_district_name" jdbcType="BIGINT" property="adminAreaLevel2DistrictName"/>
        <result column="admin_area_level_3_district_name" jdbcType="BIGINT" property="adminAreaLevel3DistrictName"/>
        <result column="district_id" jdbcType="BIGINT" property="districtId"/>
        <result column="district_name" jdbcType="BIGINT" property="districtName"/>
        <result column="parent_district_id" jdbcType="BIGINT" property="parentDistrictId"/>
        <result column="parent_district_name" jdbcType="BIGINT" property="parentDistrictName"/>
        <result column="start_available_date" jdbcType="DATE" property="startAvailableDate"/>
        <result column="end_available_date" jdbcType="DATE" property="endAvailableDate"/>
    </resultMap>

    <sql id="Base_Column_List">
        property_id, property_title, property_description, max_num_of_guests, num_of_bedrooms,
    num_of_beds, num_of_bathrooms, price_on_weekdays, price_on_weekends, is_published,
    average_rating, property_group_type_id, property_share_type_id, address_id, host_id
    </sql>

    <sql id="available_periods_sql">
        -- 對 booking_availability 表進行查詢，選擇房源ID、預訂日期以及相關的計算結果
        -- 將可預定日期按照房源ID、連續可預定期間分組標識（available_period_group）分組，計算其所在的連續可預定天數（consecutive_available_days）
        select property_id,
               booking_availability_date,
               count(*) over (partition by property_id, available_period_group) as consecutive_available_days
        from (
                 -- 子查詢：計算每個房源的連續可預定期間分組
                 -- 將可預定日期按照房源ID分組，並按照日期排序，為每個日期分配一個行號（nth_available_day）
                 -- 將可預定日期減去行號乘以一天的時間間隔，以生成連續可預定期間的分組標識（available_period_group）
                 select property_id,
                        booking_availability_date,
                        row_number()
                        over (partition by property_id order by booking_availability_date) as nth_available_day,     -- 第幾天可用
                        booking_availability_date - row_number()
                                                    over (partition by property_id, booking_availability_status order by booking_availability_date) *
                                                    interval '1 DAY'                       as available_period_group -- 連續可預定期間分組
                 from booking_availability
                 where booking_availability_status = 'available' -- 選擇預訂可用狀態為 'available' 的預訂
             ) as subquery
    </sql>

    <select id="listByNumOfAvailableDays"
            parameterType="com.penny.daoParam.propertyVoMapper.SelectPropertyParam" resultMap="BaseResultMap">
        <!-- 定義 available_periods 公用表達式（CTE），用於計算每個房源每個日期所在的連續可預定天數 -->
        with available_periods as (
        <include refid="available_periods_sql"/>
        )
        <!-- 從 available_periods CTE 中選擇屬性 -->
        select
        <foreach collection="returnFieldList" item="returnField" separator="," close=",">
            <choose>
                <when test="returnField == 'propertyId'">
                    p.property_id
                </when>
                <when test="returnField == 'propertyTitle'">
                    p.property_title
                </when>
                <when test="returnField == 'propertyDescription'">
                    p.property_description
                </when>
                <when test="returnField == 'propertyMaxNumOfGuests'">
                    p.max_num_of_guests
                </when>
                <when test="returnField == 'numOfBedrooms'">
                    p.num_of_bedrooms
                </when>
                <when test="returnField == 'numOfBeds'">
                    p.num_of_beds
                </when>
                <when test="returnField == 'numOfBathrooms'">
                    p.num_of_bathrooms
                </when>
                <when test="returnField == 'priceOnWeekdays'">
                    p.price_on_weekdays
                </when>
                <when test="returnField == 'priceOnWeekends'">
                    p.price_on_weekends
                </when>
                <when test="returnField == 'isPublished'">
                    p.is_published
                </when>
                <when test="returnField == 'averageRating'">
                    p.average_rating
                </when>
                <when test="returnField == 'propertyGroupTypeId'">
                    p.property_group_type_id
                </when>
                <when test="returnField == 'propertyShareTypeId'">
                    p.property_share_type_id
                </when>
                <when test="returnField == 'addressId'">
                    p.address_id
                </when>
                <when test="returnField == 'address'">
                    ad.apartment_floor,
                    ad.street,
                    ad.admin_area_level_1_district_id,
                    ad.admin_area_level_2_district_id,
                    ad.admin_area_level_3_district_id
                </when>
                <when test="returnField == 'district'">
                    da1.district_name as admin_area_level_1_district_name,
                    da2.district_name as admin_area_level_2_district_name,
                    da3.district_name as admin_area_level_3_district_name
                </when>
            </choose>
        </foreach>
        <!-- 計算開始的可預定日期和結束可預定日期 -->
        min(a.booking_availability_date) as start_available_date,
        min(a.booking_availability_date) + #{numOfAvailableDay, jdbcType = BIGINT} as end_available_date
        <!-- 從 available_periods CTE 中取得房源和地址等資訊 -->
        from available_periods as a
        join property as p on a.property_id = p.property_id
        <!-- 處理地址相關的 JOIN 操作 -->
        <if test="returnFieldList.contains('district') or sortFieldList.contains('district')">
            left join
            address as ad on p.address_id = ad.address_id
            left join
            district as da1 on ad.admin_area_level_1_district_id = da1.district_id
            left join
            district as da2 on ad.admin_area_level_2_district_id = da2.district_id
            left join
            district as da3 on ad.admin_area_level_3_district_id = da3.district_id
        </if>
        <!-- 如果只需要地址而不需要行政區域信息，只需要單獨的 JOIN 操作 -->
        <if test="!returnFieldList.contains('district') and !sortFieldList.contains('district') and returnFieldList.contains('address')">
            left join
            address as ad on p.address_id = ad.address_id
        </if>
        <!-- 條件過濾 -->
        where a.consecutive_available_days >= #{numOfAvailableDay, jdbcType = BIGINT}
        <!-- 分組 -->
        group by
        <trim suffixOverrides=",">
            p.property_id,
            <!-- 如果需要行政區域資訊，則加入相關欄位 -->
            <if test="returnFieldList.contains('district') or sortFieldList.contains('district')">
                ad.address_id,
                da1.district_id,
                da2.district_id,
                da3.district_id,
            </if>
            <!-- 如果只需要地址而不需要行政區域資訊，則只加入地址欄位 -->
            <if test="!returnFieldList.contains('district') and !sortFieldList.contains('district') and returnFieldList.contains('address')">
                ad.address_id,
            </if>
        </trim>
        <!-- 排序 -->
        order by
        <foreach collection="sortFieldList" item="sortField" index="index" separator="," open="" close="">
            <choose>
                <when test="sortField == 'district'">
                    ad.admin_area_level_1_district_id,
                    ad.admin_area_level_2_district_id,
                    ad.admin_area_level_3_district_id
                </when>
                <when test="sortField == 'nearestAvailableDay'">
                    min(a.booking_availability_date) - CURRENT_DATE
                </when>
            </choose>
        </foreach>
        <if test="offset != null and limit != null">
            limit #{limit}
            offset #{offset}
        </if>
        ;
    </select>

    <select id="countByNumOfAvailableDays" parameterType="java.lang.Integer" resultType="java.lang.Long">
        <!-- 定義 available_periods 公用表達式（CTE），用於計算每個房源每個日期所在的連續可預定天數 -->
        with available_periods as (
        <include refid="available_periods_sql"/>
        )
        select count(temp.property_id)
        from (
            select p.property_id
            from available_periods as a
            join property as p on a.property_id = p.property_id
            where a.consecutive_available_days >= #{numOfAvailableDay, jdbcType = BIGINT}
            group by p.property_id
        ) temp;
    </select>

    <select id="listByStartAndEndAvailableDay" parameterType="com.penny.daoParam.propertyVoMapper.SelectPropertyParam" resultMap="BaseResultMap">
        with join_district as (
            select
                d1.district_id   as parent_district_id,
                d1.district_name as parent_district_name,
                d2.district_id   as district_id,
                d2.district_name as district_name
            from
                district as d1
            left join
                district d2 on d1.district_id = d2.parent_district_id
        ),
        property_availability as (
            select
                property_id
            from
                booking_availability
            where
                booking_availability_date between #{filterMap.startAvailableDay} and #{filterMap.endAvailableDay}
            group by
                property_id
            having
                sum(case when booking_availability_status = 'booked' then 1 else 0 end) = 0
        )

        select
            <foreach collection="returnFieldList" item="returnField" separator="," close="">
                <choose>
                    <when test="returnField == 'propertyId'">
                        p.property_id
                    </when>
                    <when test="returnField == 'propertyTitle'">
                        p.property_title
                    </when>
                    <when test="returnField == 'propertyDescription'">
                        p.property_description
                    </when>
                    <when test="returnField == 'propertyMaxNumOfGuests'">
                        p.max_num_of_guests
                    </when>
                    <when test="returnField == 'numOfBedrooms'">
                        p.num_of_bedrooms
                    </when>
                    <when test="returnField == 'numOfBeds'">
                        p.num_of_beds
                    </when>
                    <when test="returnField == 'numOfBathrooms'">
                        p.num_of_bathrooms
                    </when>
                    <when test="returnField == 'priceOnWeekdays'">
                        p.price_on_weekdays
                    </when>
                    <when test="returnField == 'priceOnWeekends'">
                        p.price_on_weekends
                    </when>
                    <when test="returnField == 'isPublished'">
                        p.is_published
                    </when>
                    <when test="returnField == 'averageRating'">
                        p.average_rating
                    </when>
                    <when test="returnField == 'propertyGroupTypeId'">
                        p.property_group_type_id
                    </when>
                    <when test="returnField == 'propertyShareTypeId'">
                        p.property_share_type_id
                    </when>
                    <when test="returnField == 'addressId'">
                        p.address_id
                    </when>
                    <when test="returnField == 'address'">
                        ad.apartment_floor,
                        ad.street,
                        ad.admin_area_level_3_district_id
                    </when>
                    <when test="returnField == 'district'">
                        join_district.parent_district_id,
                        join_district.parent_district_name,
                        join_district.district_id,
                        join_district.district_name
                    </when>
                </choose>
            </foreach>
        from
            property p
        inner join
            address ad on p.address_id = ad.address_id
        left join
            join_district on ad.admin_area_level_3_district_id = join_district.district_id
        <where>
            p.property_id in (select property_id from property_availability)
            <foreach collection="filterMap" index="key" item="value" open="and" separator="and" close="">
                <choose>
                    <when test="key == 'numOfGuests'">
                        p.max_num_of_guests >= #{value}
                    </when>
                    <when test="key == 'districtId'">
                        (ad.admin_area_level_3_district_id = #{value}
                        or
                        join_district.parent_district_id = #{value})
                    </when>
                </choose>
            </foreach>
        </where>

        <trim prefix="order by" prefixOverrides="">
            <foreach collection="sortFieldList" item="sortField" index="index" open="" separator="," close="">
                <choose>
                    <when test="sortField == 'district'">
                        join_district.parent_district_id asc,
                        join_district.district_id  asc
                    </when>
                </choose>
            </foreach>
        </trim>

        <if test="offset != null and limit != null">
            limit #{limit}
            offset #{offset}
        </if>
        ;
    </select>


</mapper>