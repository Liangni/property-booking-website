<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.penny.dao.PropertyVoMapper">
    <resultMap id="BaseResultMap" type="com.penny.vo.PropertyVo">
        <id column="property_id" jdbcType="BIGINT" property="propertyId"/>
        <result column="property_title" jdbcType="VARCHAR" property="propertyTitle"/>
        <result column="property_description" jdbcType="VARCHAR" property="propertyDescription"/>
        <result column="max_num_of_guests" jdbcType="INTEGER" property="maxNumOfGuests"/>
        <result column="num_of_bedrooms" jdbcType="INTEGER" property="numOfBedrooms"/>
        <result column="num_of_beds" jdbcType="INTEGER" property="numOfBeds"/>
        <result column="num_of_bathrooms" jdbcType="INTEGER" property="numOfBathrooms"/>
        <result column="price_on_weekdays" jdbcType="BIGINT" property="priceOnWeekdays"/>
        <result column="price_on_weekends" jdbcType="BIGINT" property="priceOnWeekends"/>
        <result column="is_published" jdbcType="BIT" property="isPublished"/>
        <result column="average_rating" jdbcType="DOUBLE" property="averageRating"/>
        <result column="property_group_type_id" jdbcType="BIGINT" property="propertyGroupTypeId"/>
        <result column="property_share_type_id" jdbcType="BIGINT" property="propertyShareTypeId"/>
        <result column="address_id" jdbcType="BIGINT" property="addressId"/>
        <result column="host_id" jdbcType="BIGINT" property="hostId"/>
        <result column="street" jdbcType="VARCHAR" property="street"/>
        <result column="apartment_floor" jdbcType="VARCHAR" property="apartmentFloor"/>
        <result column="admin_area_level_1_district_id" jdbcType="BIGINT" property="adminAreaLevel1DistrictId"/>
        <result column="admin_area_level_2_district_id" jdbcType="BIGINT" property="adminAreaLevel2DistrictId"/>
        <result column="admin_area_level_3_district_id" jdbcType="BIGINT" property="adminAreaLevel3DistrictId"/>
        <result column="admin_area_level_1_district_name" jdbcType="BIGINT" property="adminAreaLevel1DistrictName"/>
        <result column="admin_area_level_2_district_name" jdbcType="BIGINT" property="adminAreaLevel2DistrictName"/>
        <result column="admin_area_level_3_district_name" jdbcType="BIGINT" property="adminAreaLevel3DistrictName"/>
        <result column="district_id" jdbcType="BIGINT" property="districtId"/>
        <result column="district_name" jdbcType="BIGINT" property="districtName"/>
        <result column="parent_district_id" jdbcType="BIGINT" property="parentDistrictId"/>
        <result column="parent_district_name" jdbcType="BIGINT" property="parentDistrictName"/>
        <result column="start_available_date" jdbcType="DATE" property="startAvailableDate"/>
        <result column="end_available_date" jdbcType="DATE" property="endAvailableDate"/>
    </resultMap>

    <sql id="Base_Column_List">
        property_id, property_title, property_description, max_num_of_guests, num_of_bedrooms,
    num_of_beds, num_of_bathrooms, price_on_weekdays, price_on_weekends, is_published,
    average_rating, property_group_type_id, property_share_type_id, address_id, host_id
    </sql>

    <sql id="available_periods_table">
        -- 對 booking_availability 表進行查詢，選擇房源ID、可預訂日期以及計算其所在的連續可預定天數（consecutive_available_days）
        select
            property_id,
            booking_availability_date,
            count(*) over (partition by property_id, available_period_group) as consecutive_available_days
        from (
                 -- 子查詢：計算每個房源的連續可預定天數分組
                 -- 將可預定日期按照房源ID分組，並按照日期排序，為每個日期分配一個行號（nth_available_day）
                 -- 將可預定日期減去行號乘以一天的時間間隔，以生成連續可預定期間的分組標識（available_period_group）
             select
                 property_id,
                 booking_availability_date,
                 row_number() over (partition by property_id order by booking_availability_date) as nth_available_day,
                 booking_availability_date - row_number() over (partition by property_id, booking_availability_status order by booking_availability_date) * interval '1 DAY' as available_period_group
             from
                 booking_availability
             where
                 booking_availability_status = 'available'
         ) as subquery
    </sql>

    <sql id="property_availability_table">
        select
            property_id
        from
            booking_availability
        where
            booking_availability_date between #{filterMap.startAvailableDay} and #{filterMap.endAvailableDay}
        group by
            property_id
        having
            sum(case when booking_availability_status = 'booked' then 1 else 0 end) = 0
    </sql>

    <sql id="join_district_table">
        select
            d1.district_id   as parent_district_id,
            d1.district_name as parent_district_name,
            d2.district_id   as district_id,
            d2.district_name as district_name
        from
            district as d1
            left join
            district d2 on d1.district_id = d2.parent_district_id
    </sql>

    <select id="listByFilter" parameterType="com.penny.daoParam.propertyVoMapper.SelectPropertyParam" resultMap="BaseResultMap">
        <trim prefix="with" suffixOverrides=",">
            <choose>
                <when test="filterMap.numOfAvailableDays != null">
                    available_periods as (
                    <include refid="available_periods_table"/>
                    ),
                </when>
                <when test="filterMap.startAvailableDay != null and filterMap.endAvailableDay != null ">
                    property_availability as (
                    <include refid="property_availability_table"/>
                    ),
                </when>
            </choose>
            <if test="returnFieldList.contains('district') or sortFieldList.contains('district')">
                join_district as (
                <include refid="join_district_table"/>
                ),
            </if>
        </trim>

        select
        <trim suffixOverrides=",">
            <foreach collection="returnFieldList" item="returnField" separator="," close=",">
                <choose>
                    <when test="returnField == 'propertyId'">
                        p.property_id
                    </when>
                    <when test="returnField == 'propertyTitle'">
                        p.property_title
                    </when>
                    <when test="returnField == 'propertyDescription'">
                        p.property_description
                    </when>
                    <when test="returnField == 'propertyMaxNumOfGuests'">
                        p.max_num_of_guests
                    </when>
                    <when test="returnField == 'numOfBedrooms'">
                        p.num_of_bedrooms
                    </when>
                    <when test="returnField == 'numOfBeds'">
                        p.num_of_beds
                    </when>
                    <when test="returnField == 'numOfBathrooms'">
                        p.num_of_bathrooms
                    </when>
                    <when test="returnField == 'priceOnWeekdays'">
                        p.price_on_weekdays
                    </when>
                    <when test="returnField == 'priceOnWeekends'">
                        p.price_on_weekends
                    </when>
                    <when test="returnField == 'isPublished'">
                        p.is_published
                    </when>
                    <when test="returnField == 'averageRating'">
                        p.average_rating
                    </when>
                    <when test="returnField == 'propertyGroupTypeId'">
                        p.property_group_type_id
                    </when>
                    <when test="returnField == 'propertyShareTypeId'">
                        p.property_share_type_id
                    </when>
                    <when test="returnField == 'addressId'">
                        p.address_id
                    </when>
                    <when test="returnField == 'address'">
                        ad.apartment_floor,
                        ad.street,
                        ad.admin_area_level_3_district_id
                    </when>
                    <when test="returnField == 'district'">
                        join_district.parent_district_id,
                        join_district.parent_district_name,
                        join_district.district_id,
                        join_district.district_name
                    </when>
                </choose>
            </foreach>
            <if test="filterMap.numOfAvailableDays != null">
                min(a.booking_availability_date) as start_available_date,
                min(a.booking_availability_date) + #{filterMap.numOfAvailableDays, jdbcType = BIGINT} as end_available_date,
            </if>
        </trim>

        from
        property as p
        <if test="filterMap.numOfAvailableDays != null">
            inner  join
            available_periods as a on a.property_id = p.property_id
        </if>
        <choose>
            <when test="returnFieldList.contains('district') or sortFieldList.contains('district')">
                left join
                address as ad on p.address_id = ad.address_id
                left join
                join_district on ad.admin_area_level_3_district_id = join_district.district_id
            </when>
            <when test="returnFieldList.contains('address')">
                left join
                address as ad on p.address_id = ad.address_id
            </when>
        </choose>

        <where>
            <choose>
                <when test="filterMap.numOfAvailableDays != null">
                    a.consecutive_available_days >= #{filterMap.numOfAvailableDays}
                </when>
                <when test="filterMap.startAvailableDay != null and filterMap.endAvailableDay != null ">
                    p.property_id in (select property_id from property_availability)
                </when>
            </choose>
            <trim prefix="and">
                <foreach collection="filterMap" index="key" item="value" open="" separator="and" close="">
                    <choose>
                        <when test="key == 'numOfGuests'">
                            p.max_num_of_guests >= #{value}
                        </when>
                        <when test="key == 'districtId'">
                            (ad.admin_area_level_3_district_id = #{value}
                            or
                            join_district.parent_district_id = #{value})
                        </when>
                    </choose>
                </foreach>
            </trim>
        </where>

        <trim prefix="group by" suffixOverrides=",">
            <if test="filterMap.numOfAvailableDays != null">
                p.property_id,
                <choose>
                    <when test="returnFieldList.contains('district') or sortFieldList.contains('district')">
                        ad.address_id,
                        join_district.parent_district_id,
                        join_district.parent_district_name,
                        join_district.district_id,
                        join_district.district_name,
                    </when>
                    <when test="returnFieldList.contains('address')">
                        ad.address_id,
                    </when>
                </choose>
            </if>
        </trim>

        <trim prefix="order by" prefixOverrides="">
            <foreach collection="sortFieldList" item="sortField" index="index" separator="," open="" close="">
                <choose>
                    <when test="sortField == 'district'">
                        join_district.parent_district_id,
                        join_district.district_id
                    </when>
                    <when test="sortField == 'nearestAvailableDay'">
                        <if test="filterMap.numOfAvailableDays != null">
                            min(a.booking_availability_date) - CURRENT_DATE
                        </if>
                    </when>
                </choose>
            </foreach>
        </trim>

        <if test="offset != null and limit != null">
            limit #{limit}
            offset #{offset}
        </if>
        ;
    </select>

    <select id="countByNumOfAvailableDays" parameterType="java.lang.Integer" resultType="java.lang.Long">
        with available_periods as (
            <include refid="available_periods_table"/>
        )
        select
            count(qualified_property_id_value.property_id)
        from (
            select
                p.property_id
            from
                available_periods as a
            join
                property as p on a.property_id = p.property_id
            where
                a.consecutive_available_days >= #{numOfAvailableDay, jdbcType = BIGINT}
            group by
                p.property_id
        ) qualified_property_id_value;
    </select>

</mapper>